<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Heidi&#39;s blog</title>
  
  <subtitle>月岛雯&amp;圣司</subtitle>
  <link href="https://trr05.github.io/blog/atom.xml" rel="self"/>
  
  <link href="https://trr05.github.io/blog/"/>
  <updated>2022-06-12T09:01:27.652Z</updated>
  <id>https://trr05.github.io/blog/</id>
  
  <author>
    <name>Heidi</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git工具.gitmodules</title>
    <link href="https://trr05.github.io/blog/2021/03/09/Git%E5%B7%A5%E5%85%B7-.gitmodules/"/>
    <id>https://trr05.github.io/blog/2021/03/09/Git%E5%B7%A5%E5%85%B7-.gitmodules/</id>
    <published>2021-03-09T08:09:48.000Z</published>
    <updated>2022-06-12T09:01:27.652Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们在项目目录中有时可能会见到这种文件.gitmodules<br>这个文件的应用场景：<br>某个工作中的项目需要包含并使用另一个项目，但又想两个项目同时独立</p></blockquote><h3 id="如何将一个项目作为另一个项目的子模块提交上去呢？"><a href="#如何将一个项目作为另一个项目的子模块提交上去呢？" class="headerlink" title="如何将一个项目作为另一个项目的子模块提交上去呢？"></a>如何将一个项目作为另一个项目的子模块提交上去呢？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git submodule add 子模块的url</span><br></pre></td></tr></table></figure><p>默认情况下 ，子模块会将子项目放到一个与仓库同名的目录中</p><h3 id="克隆含有子模块的项目"><a href="#克隆含有子模块的项目" class="headerlink" title="克隆含有子模块的项目"></a>克隆含有子模块的项目</h3><p>按照正常的拉取代码的形式， 拉取下来的项目默认会包含子模块目录，但是目录内容为空<br>两种方式：</p><ol><li>运行两个命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git submodule init 用来初始化本地配置文件</span><br><span class="line">git submodule update 从该项目中抓取所有数据并检出父项目中列出的合适的提交</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>git clone命令传递–recurse-submodules 选项，它就会自动初始化并更新仓库中的每一个子模块，包括可能存在的嵌套子模块</li></ol><p>如果已经克隆了项目，但是忘记了–recurse-submodules，那么可以运行git submodule update –init将以上两个命令合并成一步。如果还要初始化、抓取并检出任何嵌套的子模块，可以使用git submodule update –init –recursive</p><h3 id="在包含子模块的项目上工作"><a href="#在包含子模块的项目上工作" class="headerlink" title="在包含子模块的项目上工作"></a>在包含子模块的项目上工作</h3><p>更新子模块：git submodule update –remote 子模块名字<br>加上子模块的名字可以更新固定的模块</p><h3 id="推送"><a href="#推送" class="headerlink" title="推送"></a>推送</h3><p>可以让Git在推送到主项目前检查所有子模块是否已推送<br>git push –recurse-submodules=check<br>如果任何提交的子模块改动没有推送那么“check“选项会直接使push操作失败<br>失败之后如何做？<br>进入到每一个子模块中然后手动推送到远程仓库，之后再次尝试这次推送</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我们在项目目录中有时可能会见到这种文件.gitmodules&lt;br&gt;这个文件的应用场景：&lt;br&gt;某个工作中的项目需要包含并使用另一个项目，但又想两个项目同时独立&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;如何将一个项目作为另一个项目的子模</summary>
      
    
    
    
    
    <category term="开发工具" scheme="https://trr05.github.io/blog/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>虚拟机&amp;容器对比</title>
    <link href="https://trr05.github.io/blog/2021/01/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E5%AE%B9%E5%99%A8%E5%8C%BA%E5%88%AB/"/>
    <id>https://trr05.github.io/blog/2021/01/28/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%92%8C%E5%AE%B9%E5%99%A8%E5%8C%BA%E5%88%AB/</id>
    <published>2021-01-28T02:15:25.000Z</published>
    <updated>2022-06-12T09:01:27.653Z</updated>
    
    <content type="html"><![CDATA[<h4 id="虚拟机和容器的对比图"><a href="#虚拟机和容器的对比图" class="headerlink" title="虚拟机和容器的对比图"></a>虚拟机和容器的对比图</h4><p><img src="/blog/images/vm.png"></p><h6 id="图左—虚拟机的原理"><a href="#图左—虚拟机的原理" class="headerlink" title="图左—虚拟机的原理"></a>图左—虚拟机的原理</h6><p>Hypervisor：虚拟机监控器，是一个用于创建和运行虚拟机的进程</p><p><strong>一台主机计算机可通过虚拟化的方式共享其资源(如内存和处理资源)来支持多台客户机虚拟机，它在这些虚拟的硬件上安装了一个新的操作系统，即Guest OS</strong></p><p>用户进程可以运行在这个虚拟的机器中 ，它能看到的自然也只有Guest OS的文件和目录，以及这个机器里的虚拟设备</p><h6 id="图右—容器原理"><a href="#图右—容器原理" class="headerlink" title="图右—容器原理"></a>图右—容器原理</h6><p>用户运行在容器里的应用进程，跟宿主机上的其他进程一样，都由宿主机操作系统统一管理，只不过这些被隔离的进程拥有额外设置过的Namespace参数，而Docker Engine在这里扮演的角色，更多是旁路式的辅助和管理工作</p><h5 id="为什么Docker项目比虚拟机更受欢迎"><a href="#为什么Docker项目比虚拟机更受欢迎" class="headerlink" title="为什么Docker项目比虚拟机更受欢迎"></a>为什么Docker项目比虚拟机更受欢迎</h5><ol><li><p>使用虚拟化技术作为应用沙盒，就必须要由Hypervisor来负责创建虚拟机，这个虚拟机是真实存在的，并且它里面必须运行着一个完整的Guest OS才能执行用户的应用进程，这就不可避免地带来了额外的资源消耗和占用</p></li><li><p>用户应用运行在虚拟机里面，它对宿主机操作系统的调用就不可避免地要经过虚拟化软件的拦截和处理，这本身就是一层性能消耗，尤其是计算资源、网络和磁盘I/O的损耗非常大</p></li><li><p>相比之下，容器化后的用户应用，却依然还是一个宿主机的普通进程，这就意味着因为虚拟化而带来的性能损耗都是不存在的<br>此外，使用Namespace作为隔离手段的容器不需要单独的Guest OS，这就使得容器额外的资源占用几乎可以忽略不计</p></li><li><p>但Docker也存在不足之处-隔离得不彻底，既然容器只是运行在宿主机上的一种特殊的进程，那么多个容器之间使用的就还是同一个宿主机的操作系统的内核；其次，在Linux内核中 ，有很多资源和对象是不能被Namesapce化的，比如时间</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;虚拟机和容器的对比图&quot;&gt;&lt;a href=&quot;#虚拟机和容器的对比图&quot; class=&quot;headerlink&quot; title=&quot;虚拟机和容器的对比图&quot;&gt;&lt;/a&gt;虚拟机和容器的对比图&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;/blog/images/vm.png&quot;&gt;&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    
    <category term="容器系列" scheme="https://trr05.github.io/blog/tags/%E5%AE%B9%E5%99%A8%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>myFirstBlog</title>
    <link href="https://trr05.github.io/blog/2021/01/20/myFirstBlog/"/>
    <id>https://trr05.github.io/blog/2021/01/20/myFirstBlog/</id>
    <published>2021-01-20T11:54:40.000Z</published>
    <updated>2022-06-12T09:01:27.652Z</updated>
    
    
    
    
    <category term="have a try" scheme="https://trr05.github.io/blog/categories/have-a-try/"/>
    
    
    <category term="Movie" scheme="https://trr05.github.io/blog/tags/Movie/"/>
    
    <category term="Travel" scheme="https://trr05.github.io/blog/tags/Travel/"/>
    
  </entry>
  
</feed>
